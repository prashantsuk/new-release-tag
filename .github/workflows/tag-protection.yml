# .github/workflows/tag-protection.yml
# This workflow prevents manual tag creation and only allows automated releases

name: Tag Protection

on:
  create:
    tags:
      - 'v*'              # Version tags like v1.0.0, v2.1.3
      - 'release-*'       # Release tags like release-1.0.0
      - '*.*.*'           # Semantic version tags like 1.0.0

jobs:
  validate-tag-creation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate tag creation source
        id: validate
        run: |
          echo "🔍 Checking tag creation context..."
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Tag: ${{ github.ref_name }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref Type: ${{ github.ref_type }}"
          
          # Get the commit that created this tag
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }} 2>/dev/null || echo "unknown")
          echo "Tag points to commit: $TAG_COMMIT"
          
          # Get the commit message for the tagged commit
          if [[ "$TAG_COMMIT" != "unknown" ]]; then
            COMMIT_MSG=$(git log -1 --pretty=%B $TAG_COMMIT 2>/dev/null || echo "")
            echo "Commit message: $COMMIT_MSG"
          else
            COMMIT_MSG=""
            echo "Could not retrieve commit message"
          fi
          
          # Get tag annotation message if it exists
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }} 2>/dev/null || echo "")
          echo "Tag annotation: $TAG_MESSAGE"
          
          # STRICT VALIDATION: Default to BLOCK unless we find EXPLICIT automation markers
          echo "🔒 STRICT MODE: Tag will be blocked unless explicit automation markers are found"
          
          # Method 1: Check if tag annotation contains our EXACT automation marker
          if [[ "$TAG_MESSAGE" =~ \[automated-release\] ]]; then
            echo "✅ FOUND: Tag annotation contains [automated-release] marker"
            echo "allowed=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ NOT FOUND: Tag annotation does not contain [automated-release] marker"
          fi
          
          # Method 2: Check if commit message contains our EXACT automation marker
          if [[ "$COMMIT_MSG" =~ \[automated-release\] ]]; then
            echo "✅ FOUND: Commit message contains [automated-release] marker"
            echo "allowed=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ NOT FOUND: Commit message does not contain [automated-release] marker"
          fi
          
          # Method 3: Check if recent commits (last 5 minutes) contain automation marker AND tag points to one of them
          echo "🔍 Checking for recent automation activity..."
          RECENT_AUTOMATION=$(git log --since="5 minutes ago" --oneline --grep="\[automated-release\]" 2>/dev/null || echo "")
          if [[ -n "$RECENT_AUTOMATION" ]]; then
            echo "✅ FOUND: Recent automation commits in last 5 minutes:"
            echo "$RECENT_AUTOMATION"
            
            # Check if the tag points to one of these automation commits
            if echo "$RECENT_AUTOMATION" | grep -q "$TAG_COMMIT"; then
              echo "✅ MATCH: Tag points to recent automation commit - allowing"
              echo "allowed=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ NO MATCH: Tag does not point to recent automation commit"
            fi
          else
            echo "❌ NOT FOUND: No recent automation activity in last 5 minutes"
          fi
          
          # Method 4: Check if this is triggered by workflow_run (from another workflow)
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "✅ FOUND: Triggered by workflow_run event - allowing"
            echo "allowed=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ NOT FOUND: Not triggered by workflow_run"
          fi
          
          # Method 5: Check for automation in last 10 commits AND verify tag points to one of them
          echo "🔍 Checking last 10 commits for automation markers..."
          RECENT_AUTOMATION_EXTENDED=$(git log --oneline -10 --grep="\[automated-release\]" 2>/dev/null || echo "")
          if [[ -n "$RECENT_AUTOMATION_EXTENDED" ]]; then
            echo "✅ FOUND: Automation commits in last 10:"
            echo "$RECENT_AUTOMATION_EXTENDED"
            
            # Check if the tag points to one of these automation commits
            if echo "$RECENT_AUTOMATION_EXTENDED" | grep -q "$TAG_COMMIT"; then
              echo "✅ MATCH: Tag points to automation commit - allowing"
              echo "allowed=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ NO MATCH: Tag does not point to any automation commit"
            fi
          else
            echo "❌ NOT FOUND: No automation commits in last 10"
          fi
          
          # If we reach here, NO automation markers were found - this is MANUAL
          echo ""
          echo "🚨 BLOCKING DECISION:"
          echo "❌ NO automation markers found anywhere!"
          echo "❌ Tag '${{ github.ref_name }}' is MANUAL"
          echo "❌ Actor: ${{ github.actor }}"
          echo "❌ Tag annotation: '$TAG_MESSAGE'"
          echo "❌ Commit message: '$COMMIT_MSG'"
          echo "❌ No [automated-release] markers in recent commits"
          echo ""
          echo "🗑️ This tag will be DELETED!"
          echo "allowed=false" >> $GITHUB_OUTPUT

      - name: Delete manual tag and create notification
        if: steps.validate.outputs.allowed == 'false'
        run: |
          TAG_NAME="${{ github.ref_name }}"
          CREATOR="${{ github.actor }}"
          
          echo "::error::🚫 Manual tag creation is not allowed!"
          echo "::error::Tag '$TAG_NAME' was created manually by $CREATOR"
          echo "::error::Please use the 'Automated Release' workflow instead."
          
          # Show current repository state for debugging
          echo "🔍 Repository state:"
          echo "Branch: $(git branch --show-current 2>/dev/null || echo 'detached')"
          echo "Last 3 commits:"
          git log --oneline -3 || echo "No commits found"
          echo "All tags:"
          git tag -l || echo "No tags found"
          
          # Configure git
          git config --global user.name "GitHub Actions Tag Protection"
          git config --global user.email "actions@github.com"
          
          # Delete the manually created tag
          echo "🗑️ Attempting to delete manual tag: $TAG_NAME"
          echo "🔍 Current git state before deletion:"
          git tag -l | grep "$TAG_NAME" || echo "Tag not found locally"
          
          # Method 1: Delete using git push
          echo "Method 1: Deleting via git push..."
          if git push origin :refs/tags/$TAG_NAME 2>&1; then
            echo "✅ Successfully deleted tag $TAG_NAME from remote using git push"
            DELETION_SUCCESS=true
          else
            echo "❌ Failed to delete tag using git push"
            DELETION_SUCCESS=false
          fi
          
          # Method 2: Delete using GitHub API if git push failed
          if [[ "$DELETION_SUCCESS" != "true" ]]; then
            echo "Method 2: Deleting via GitHub API..."
            if gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$TAG_NAME" 2>&1; then
              echo "✅ Successfully deleted tag $TAG_NAME using GitHub API"
              DELETION_SUCCESS=true
            else
              echo "❌ Failed to delete tag using GitHub API"
            fi
          fi
          
          # Method 3: Force delete with alternative API endpoint
          if [[ "$DELETION_SUCCESS" != "true" ]]; then
            echo "Method 3: Force delete via alternative API..."
            TAG_SHA=$(gh api "repos/${{ github.repository }}/git/refs/tags/$TAG_NAME" --jq '.object.sha' 2>/dev/null || echo "")
            if [[ -n "$TAG_SHA" ]]; then
              if gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$TAG_NAME" -f sha="$TAG_SHA" 2>&1; then
                echo "✅ Successfully force deleted tag $TAG_NAME"
                DELETION_SUCCESS=true
              fi
            fi
          fi
          
          # Check if tag still exists
          echo "🔍 Verifying tag deletion..."
          sleep 2  # Wait a moment for GitHub to process
          
          # Check if tag exists using API (suppress error output for cleaner logs)
          if gh api "repos/${{ github.repository }}/git/refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag still exists after deletion attempts"
            DELETION_STATUS="❌ Failed to delete (tag still exists)"
          else
            echo "✅ Tag successfully deleted and no longer exists"
            DELETION_STATUS="✅ Successfully deleted"
          fi
          
          # Create an issue to notify about the blocked attempt
          cat > issue_body.md << EOF
          ## 🚫 Manual Tag Creation Blocked
          
          **Tag:** \`$TAG_NAME\`  
          **Created by:** @$CREATOR  
          **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Event:** ${{ github.event_name }}  
          **Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})  
          **Deletion Status:** $DELETION_STATUS
          
          ### ❌ What happened?
          The tag \`$TAG_NAME\` was created manually and our automation detected it.
          **Action taken:** Attempted automatic deletion.
          
          ### 🔍 Detection Details
          - **Actor:** ${{ github.actor }}
          - **Event:** ${{ github.event_name }}
          - **Tag Commit:** $TAG_COMMIT
          - **No automation markers found in tag or recent commits**
          
          ### ✅ How to create releases properly?
          
          **Option 1: Use the Automated Release Workflow**
          1. Go to **[Actions → Automated Release](https://github.com/${{ github.repository }}/actions/workflows/automated-release.yml)**
          2. Click **"Run workflow"**
          3. Enter the version number (e.g., \`1.0.3\`)
          4. Click **"Run workflow"**
          
          **Option 2: Update VERSION file and merge PR**
          1. Create a feature branch
          2. Update the \`VERSION\` file with your desired version (e.g., \`1.0.3\`)
          3. Create and merge a PR to main/master
          4. Release will be created automatically
          
          ### 🔧 Why this restriction exists?
          - ✅ Ensures consistent release process
          - ✅ Automatically generates changelogs
          - ✅ Maintains proper version history
          - ✅ Prevents accidental or malformed releases
          - ✅ Tracks release triggers and contexts
          
          ### 🚨 If this was a legitimate automated release
          If you believe this tag was created by automation but was incorrectly flagged:
          1. Check that your automation includes the \`[automated-release]\` marker
          2. Verify the tag annotation contains automation markers
          3. Contact the DevOps team for investigation
          
          ### 📋 Need help?
          - Check the repository's release documentation
          - Contact the DevOps team
          - Review existing releases for examples
          
          ---
          *This issue was created automatically by the Tag Protection workflow.*
          *Workflow Run: ${{ github.run_id }}*
          EOF
          
          # Create the notification issue (with better error handling)
          echo "📝 Creating notification issue..."
          
          # First, try to create issue with assignee
          if gh issue create \
            --title "🚫 Manual tag creation blocked: $TAG_NAME" \
            --body-file issue_body.md \
            --label "automation,release,blocked" \
            --assignee "$CREATOR" 2>/dev/null; then
            echo "✅ Created notification issue and assigned to $CREATOR"
          elif gh issue create \
            --title "🚫 Manual tag creation blocked: $TAG_NAME" \
            --body-file issue_body.md \
            --label "automation,release,blocked" 2>/dev/null; then
            echo "✅ Created notification issue (without assignee)"
          else
            echo "⚠️ Failed to create issue - this could be due to:"
            echo "   - Repository doesn't have Issues enabled"
            echo "   - Insufficient permissions"
            echo "   - GitHub API rate limits"
            echo "📝 Issue content would have been:"
            echo "---"
            cat issue_body.md
            echo "---"
          fi
          
          # The workflow should exit with error to clearly show the blocking action
          echo ""
          echo "🎯 SUMMARY:"
          echo "✅ Manual tag creation was detected and blocked"
          echo "✅ Tag '$TAG_NAME' was successfully deleted"
          echo "🔴 This workflow failure is EXPECTED - it indicates successful blocking!"
          echo ""
          echo "::error::✅ SUCCESS: Manual tag '$TAG_NAME' was blocked and deleted"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log successful automation
        if: steps.validate.outputs.allowed == 'true'
        run: |
          echo "✅ Tag creation validated successfully"
          echo "✅ Tag '${{ github.ref_name }}' created by automation"
          echo "✅ Release process completed properly"
