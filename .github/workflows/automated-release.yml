# Add auto-increment information if applicable
          if [[ "${{ steps.version.outputs.auto_increment }}" == "true" ]]; then
            echo "" >> changelog.md
            echo "### 🤖 Auto-Generated Release" >> changelog.md
            echo "This release was automatically created because:" >> changelog.md
            if [[ -z "$LAST_TAG" ]]; then
              echo "- This is the first release for this repository" >> changelog.md
            else
              echo "- Feature branch was merged without version file changes" >> changelog.md
              echo "- Version automatically incremented from $LAST_VERSION to $VERSION" >> changelog.md
            fi
          fi# .github/workflows/automated-release.yml
# This is the ONLY approved way to create release tags

name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0, 2.1.3)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release?'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

  # Auto-trigger when feature branches are merged to main/master
  push:
    branches:
      - main
      - master

  # Also trigger on pull request merge to main/master
  pull_request:
    types: [closed]
    branches:
      - main
      - master

env:
  AUTOMATED_RELEASE: true  # This flag identifies automated releases

jobs:
  validate-and-release:
    runs-on: ubuntu-latest
    # Only run on main/master branch and for merged PRs
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    permissions:
      contents: write
      issues: write
      pull-requests: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check trigger context
        id: trigger_context
        run: |
          echo "🔍 Checking release trigger context..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          
          # Check if this is a valid trigger for release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✅ Manual workflow dispatch - release allowed"
            echo "trigger_type=manual" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "✅ Pull request merged to ${{ github.event.pull_request.base.ref }} - checking for release triggers"
            echo "trigger_type=pr_merged" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            echo "source_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
            
            # Always allow release for merged PRs - we'll check version changes later
            echo "✅ PR merged - will check for version changes or auto-increment"
            echo "should_release=check_version" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "✅ Direct push to main/master with version file changes"
            echo "trigger_type=push" >> $GITHUB_OUTPUT
            echo "should_release=check_version" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid trigger context"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version
        id: version
        if: steps.trigger_context.outputs.should_release != 'false'
        run: |
          VERSION=""
          AUTO_INCREMENT=false
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "📝 Manual version input: $VERSION"
          else
            # Auto-detect version from files for PR merges and pushes
            echo "🔍 Searching for version files..."
            
            # Check VERSION file first
            if [[ -f "VERSION" ]]; then
              echo "📄 Found VERSION file"
              VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
              if [[ -n "$VERSION" ]]; then
                echo "✅ Version from VERSION file: $VERSION"
              else
                echo "❌ VERSION file exists but is empty"
                VERSION=""
              fi
            fi
            
            # Check other version files if VERSION file not found or empty
            if [[ -z "$VERSION" && -f "package.json" ]]; then
              echo "📦 Found package.json"
              VERSION=$(jq -r '.version' package.json 2>/dev/null || echo "")
              if [[ -n "$VERSION" && "$VERSION" != "null" ]]; then
                echo "✅ Version from package.json: $VERSION"
              fi
            fi
            
            if [[ -z "$VERSION" && -f "version.txt" ]]; then
              echo "📄 Found version.txt"
              VERSION=$(cat version.txt | tr -d '\n\r' | xargs)
              if [[ -n "$VERSION" ]]; then
                echo "✅ Version from version.txt: $VERSION"
              fi
            fi
            
            # Get the last release tag for comparison
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            LAST_VERSION=${LAST_TAG#v}
            
            echo "🏷️ Last release tag: $LAST_TAG"
            echo "🔢 Last version: $LAST_VERSION"
            
            # If no version file found or version unchanged, auto-increment
            if [[ -z "$VERSION" ]] || [[ "$VERSION" == "$LAST_VERSION" ]]; then
              echo "🤖 Auto-incrementing version..."
              AUTO_INCREMENT=true
              
              if [[ -z "$LAST_TAG" ]]; then
                # No previous releases - start with 1.0.0
                VERSION="1.0.0"
                echo "🎉 First release detected - using version: $VERSION"
              else
                # Parse last version and increment patch version
                if [[ "$LAST_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
                  MAJOR=${BASH_REMATCH[1]}
                  MINOR=${BASH_REMATCH[2]}
                  PATCH=${BASH_REMATCH[3]}
                  SUFFIX=${BASH_REMATCH[4]}
                  
                  # Increment patch version
                  NEW_PATCH=$((PATCH + 1))
                  VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                  
                  echo "📈 Auto-incremented version: $LAST_VERSION → $VERSION"
                else
                  echo "❌ Cannot parse last version: $LAST_VERSION"
                  VERSION="1.0.0"
                  echo "🔄 Falling back to: $VERSION"
                fi
              fi
              
              # Update VERSION file with new version
              if [[ -f "VERSION" ]]; then
                echo "$VERSION" > VERSION
                echo "📝 Updated VERSION file with: $VERSION"
                
                # Commit the version update
                git config --global user.name "github-actions[bot]"
                git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                git add VERSION
                git commit -m "chore: bump version to $VERSION [automated-release]" || echo "No changes to commit"
                git push origin ${{ github.ref_name }} || echo "Failed to push version update"
              fi
            else
              # Version file has been manually updated
              if [[ "${{ steps.trigger_context.outputs.should_release }}" == "check_version" ]]; then
                if [[ "$VERSION" == "$LAST_VERSION" ]]; then
                  echo "ℹ️ Version hasn't changed ($VERSION) - skipping release"
                  echo "skip_release=true" >> $GITHUB_OUTPUT
                  exit 0
                else
                  echo "✅ Version manually changed from $LAST_VERSION to $VERSION - proceeding with release"
                fi
              fi
            fi
          fi
          
          # Ensure VERSION is not empty before proceeding
          if [[ -z "$VERSION" ]]; then
            echo "::error::VERSION is empty after all checks"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "auto_increment=$AUTO_INCREMENT" >> $GITHUB_OUTPUT
          echo "🎯 Final release version: $VERSION"

      - name: Skip release notification
        if: steps.version.outputs.skip_release == 'true'
        run: |
          echo "## ℹ️ Release Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** No version changes detected" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ steps.trigger_context.outputs.trigger_type }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "pr_merged" ]]; then
            echo "**PR:** #${{ steps.trigger_context.outputs.pr_number }} - ${{ steps.trigger_context.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** ${{ steps.trigger_context.outputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To create a release, update the version in your version file and merge the changes." >> $GITHUB_STEP_SUMMARY

      - name: Validate version format
        if: steps.version.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Debug output
          echo "🔍 Validating version: '$VERSION'"
          echo "Length: ${#VERSION}"
          
          # Check if version is empty
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "::error::❌ Version is empty or null"
            echo "::error::Please check your version file or provide version input"
            exit 1
          fi
          
          # Remove 'v' prefix if present for validation
          CLEAN_VERSION=${VERSION#v}
          echo "🧹 Clean version (without 'v'): '$CLEAN_VERSION'"
          
          # Check semantic versioning format (more flexible)
          if [[ "$CLEAN_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?(\+[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "✅ Version format is valid: $CLEAN_VERSION"
          else
            echo "::error::❌ Invalid version format: '$CLEAN_VERSION'"
            echo "::error::Version must be in format X.Y.Z or X.Y.Z-suffix or X.Y.Z+build"
            echo "::error::Examples: 1.0.0, 2.1.3-beta, 1.0.0-alpha.1, 1.0.0+20230101"
            echo "::error::Current value: '$VERSION' (cleaned: '$CLEAN_VERSION')"
            exit 1
          fi

      - name: Check if tag already exists
        if: steps.version.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION#v}"  # Ensure 'v' prefix
          
          if git tag -l | grep -q "^$TAG$"; then
            echo "::error::❌ Tag $TAG already exists!"
            echo "::error::Please use a different version number."
            exit 1
          fi
          
          echo "✅ Tag $TAG is available"

      - name: Get commit range for changelog
        id: commit_range
        if: steps.version.outputs.skip_release != 'true'
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
            echo "📊 Last tag: $LAST_TAG"
          else
            echo "last_tag=" >> $GITHUB_OUTPUT
            echo "📊 No previous tags found (first release)"
          fi

      - name: Generate changelog
        id: changelog
        if: steps.version.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          LAST_TAG="${{ steps.commit_range.outputs.last_tag }}"
          
          echo "📝 Generating changelog..."
          
          # Start changelog
          echo "## 🚀 Release v$VERSION" > changelog.md
          echo "" >> changelog.md
          
          # Add manual release notes if provided
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            echo "### 📋 Release Notes" >> changelog.md
            echo "${{ github.event.inputs.release_notes }}" >> changelog.md
            echo "" >> changelog.md
          fi
          
          # Add auto-increment information if applicable
          if [[ "${{ steps.version.outputs.auto_increment }}" == "true" ]]; then
            echo "### 🤖 Auto-Generated Release" >> changelog.md
            echo "This release was automatically created because:" >> changelog.md
            if [[ -z "$LAST_TAG" ]]; then
              echo "- This is the first release for this repository" >> changelog.md
            else
              echo "- Feature branch was merged without version file changes" >> changelog.md
              echo "- Version automatically incremented from $LAST_VERSION to $VERSION" >> changelog.md
            fi
            echo "" >> changelog.md
          fi
          
          # Generate automatic changelog with PR information
          echo "### 📦 Changes" >> changelog.md
          
          if [[ -n "$LAST_TAG" ]]; then
            echo "Changes since $LAST_TAG:" >> changelog.md
            echo "" >> changelog.md
            
            # Get commits with nice formatting
            git log --oneline --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $LAST_TAG..HEAD >> changelog.md
            
            # Add PR information if this was triggered by PR merge
            if [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "pr_merged" ]]; then
              echo "" >> changelog.md
              echo "### 🔀 Merged Pull Requests" >> changelog.md
              echo "- #${{ steps.trigger_context.outputs.pr_number }}: ${{ steps.trigger_context.outputs.pr_title }}" >> changelog.md
              echo "- Source branch: \`${{ steps.trigger_context.outputs.source_branch }}\`" >> changelog.md
            fi
            
            # Add contributors
            echo "" >> changelog.md
            echo "### 👥 Contributors" >> changelog.md
            git log --format='- @%an' $LAST_TAG..HEAD | sort -u >> changelog.md
          else
            echo "Initial release" >> changelog.md
            echo "" >> changelog.md
            git log --oneline --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" HEAD~10..HEAD >> changelog.md
          fi
          
          # Add comparison link
          echo "" >> changelog.md
          if [[ -n "$LAST_TAG" ]]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$VERSION" >> changelog.md
          fi
          
          # Output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated successfully"

      - name: Create release tag
        if: steps.version.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION#v}"
          
          # Configure git with bot identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with automation marker and trigger info
          TRIGGER_INFO=""
          if [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "pr_merged" ]]; then
            TRIGGER_INFO="
          Triggered by: PR #${{ steps.trigger_context.outputs.pr_number }} merge
          PR Title: ${{ steps.trigger_context.outputs.pr_title }}
          Source Branch: ${{ steps.trigger_context.outputs.source_branch }}"
          elif [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "push" ]]; then
            TRIGGER_INFO="
          Triggered by: Direct push to ${{ github.ref_name }}"
          elif [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "manual" ]]; then
            TRIGGER_INFO="
          Triggered by: Manual workflow dispatch"
          fi
          
          git tag -a "$TAG" -m "Release $TAG [automated-release]

          This release was created automatically via GitHub Actions.
          
          Version: $VERSION
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Actor: ${{ github.actor }}$TRIGGER_INFO
          "
          
          # Push the tag
          git push origin "$TAG"
          
          echo "✅ Created and pushed tag: $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        if: steps.version.outputs.skip_release != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: 🚀 Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release }}

      - name: Output release information
        if: steps.version.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_URL="${{ steps.create_release.outputs.html_url }}"
          
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** $RELEASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ github.event.inputs.pre_release }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ steps.trigger_context.outputs.trigger_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auto-increment:** ${{ steps.version.outputs.auto_increment }}" >> $GITHUB_STEP_SUMMARY
          
          # Add trigger-specific information
          if [[ "${{ steps.trigger_context.outputs.trigger_type }}" == "pr_merged" ]]; then
            echo "**Merged PR:** #${{ steps.trigger_context.outputs.pr_number }} - ${{ steps.trigger_context.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** ${{ steps.trigger_context.outputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 View Release]($RELEASE_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Download Assets]($RELEASE_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [🏷️ All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          
          echo "🎯 Release v$VERSION created successfully!"
          echo "🔗 Release URL: $RELEASE_URL"
